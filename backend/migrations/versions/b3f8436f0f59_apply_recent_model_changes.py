"""apply_recent_model_changes

Revision ID: b3f8436f0f59
Revises: 8f928dbf8482
Create Date: 2025-05-14 10:30:06.036145

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b3f8436f0f59'
down_revision: Union[str, None] = '8f928dbf8482'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop old tables if they exist (idempotently)
    # Downgrade of 8f928dbf8482 would drop message_files, but we ensure it's gone
    # and also handle gemini_files which might have been created manually or by an older script.
    op.execute("DROP TABLE IF EXISTS message_files")
    op.execute("DROP TABLE IF EXISTS gemini_files") # Assuming this table existed

    # Create file_metadata table
    op.create_table('file_metadata',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('original_filename', sa.String(), nullable=True),
    sa.Column('content_type', sa.String(), nullable=True),
    sa.Column('size', sa.Integer(), nullable=True),
    sa.Column('local_disk_path', sa.String(), nullable=False),
    sa.Column('upload_timestamp', sa.DateTime(), nullable=True),
    sa.Column('processing_method', sa.String(), nullable=False),
    sa.Column('gemini_api_file_id', sa.String(), nullable=True),
    sa.Column('gemini_api_upload_timestamp', sa.DateTime(), nullable=True),
    sa.Column('gemini_api_expiry_timestamp', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('local_disk_path')
    )
    op.create_index(op.f('ix_file_metadata_id'), 'file_metadata', ['id'], unique=False)
    op.create_index(op.f('ix_file_metadata_original_filename'), 'file_metadata', ['original_filename'], unique=False)
    op.create_index(op.f('ix_file_metadata_gemini_api_file_id'), 'file_metadata', ['gemini_api_file_id'], unique=False)

    # Create message_file_link association table
    op.create_table('message_file_link',
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('file_metadata_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['file_metadata_id'], ['file_metadata.id'], ),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ),
    sa.PrimaryKeyConstraint('message_id', 'file_metadata_id')
    )

    # Add CHECK constraint to messages.role
    # Ensure messages table exists before trying to add constraint, though it should
    # from previous migrations if they were applied.
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.create_check_constraint(
            "ck_message_role",
            "role IN ('user', 'model', 'assistant')"
        )

    # Note: Changes to chats.id (nullable=False, autoincrement='auto')
    # For SQLite, a column of type INTEGER with PRIMARY KEY is an alias for ROWID,
    # which is autoincrementing and cannot be NULL. So, explicit nullable=False
    # and autoincrement='auto' might not result in schema changes if it was already
    # defined as INTEGER PRIMARY KEY. We'll assume no DDL change for this for now.

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Remove CHECK constraint from messages.role
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.drop_constraint("ck_message_role", type_='check')

    # Drop message_file_link table
    op.drop_table('message_file_link')

    # Drop file_metadata table
    op.drop_index(op.f('ix_file_metadata_gemini_api_file_id'), table_name='file_metadata')
    op.drop_index(op.f('ix_file_metadata_original_filename'), table_name='file_metadata')
    op.drop_index(op.f('ix_file_metadata_id'), table_name='file_metadata')
    op.drop_table('file_metadata')

    # Recreate 'message_files' table (approximating its previous structure from 8f928dbf8482)
    # This is a best-effort downgrade for this part.
    op.create_table('message_files',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('file_path', sa.String(), nullable=False), # This column seems to be gone now, replaced by FileMetadata concepts
    sa.Column('file_id', sa.String(), nullable=False), # This was likely the Gemini File ID
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('content_type', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_message_files_file_id'), 'message_files', ['file_id'], unique=False)
    op.create_index(op.f('ix_message_files_id'), 'message_files', ['id'], unique=False)

    # Recreate 'gemini_files' table (approximating a potential structure if it mapped to Gemini files)
    # Since its initial creation script was empty, this is highly speculative.
    # We'll assume it had an id and maybe gemini_file_id and the permanent flag.
    op.create_table('gemini_files',
        sa.Column('id', sa.Integer(), nullable=False, primary_key=True, autoincrement=True),
        sa.Column('gemini_file_id', sa.String(), nullable=True, index=True), # Example column
        sa.Column('filename', sa.String(), nullable=True), # Example column
        sa.Column('upload_timestamp', sa.DateTime(), nullable=True), # Example column
        sa.Column('permanent', sa.Integer(), nullable=True) # Added in 8f928dbf8482
    )
    op.create_index(op.f('ix_gemini_files_id'), 'gemini_files', ['id'], unique=False)


    # ### end Alembic commands ###
